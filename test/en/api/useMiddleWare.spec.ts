import {
    createAgentReducer,
    MiddleWarePresets,
    MiddleWares,
    OriginAgent,
    useMiddleWare
} from "../../../src";

describe('how to use api useMiddleWare', () => {

    class VersionModel implements OriginAgent<number> {

        state = 0;

        async fetchVersion(version: number, delay: number) {
            await new Promise((r) => setTimeout(r, delay));
            return version;
        }

    }

    it("MiddleWares added by api useMiddleWare will override MiddleWares added by api createAgentReducer on the copy 'Agent'" +
        " which is generated by useMiddleWare", async () => {
        const {agent} = createAgentReducer(VersionModel, MiddleWares.takePromiseResolve());
        // MiddleWarePresets.takeLatest override MiddleWares.takePromiseResolve
        const copy = useMiddleWare(agent, MiddleWarePresets.takeLatest());
        const promise1 = copy.fetchVersion(1, 200);
        const promise2 = copy.fetchVersion(2, 0);
        await Promise.all([promise1, promise2]);
        // MiddleWarePresets.takeLatest override MiddleWares.takePromiseResolve,
        // and the first calling of fetchVersion returns can not be next state.
        // The agent.state keeps equal with the copy.state
        expect(agent.state).toBe(2);
        expect(copy.state).toBe(agent.state);
    });

});